[Default]

Version = 1
;; Used incase there is ever a breaking change, or to inform user in log about a new feature.

Strip Chars = ";[]"
;; List of characters to strip out
Strip Chars Mode = 0
;; 0 = Strip Bad Chars, 1 = Strip + Log Bad Chars, 2 = Return Error & Log Bad Chars
;;     Note: Logging on works when sending data to database.


; --------------------------------------------------------------------------------
; SQL Statements https://bitbucket.org/torndeco/extdb3/wiki/extDB3%20-%20sql_custom.ini
; --------------------------------------------------------------------------------

[existPlayerInfo]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM users WHERE uid = ?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END;
SQL1_INPUTS = 1

[insertPlayerInfo]
SQL1_1 = INSERT INTO users (uid, name, items, clothes, weapons, cash, bank, position, bankaccount) VALUES (?,?,?,?,?,?,?,?,?);
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9

[updatePlayerInfo]
SQL1_1 = UPDATE users SET items=?, clothes=?, weapons=?, cash=?, bank=?, position=?, hunger=?, thirst=? WHERE uid=?;
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9

[playerInfo]
SQL1_1 = SELECT items, clothes, weapons, cash, bank, bankaccount, hunger, thirst, houselevel, respawn FROM users WHERE uid=?;
SQL1_INPUTS = 1
OUTPUT = 1,2,3,4,5,6-string,7,8,9,10

[updateInventory]
SQL1_1 = UPDATE users SET items=?, clothes=?, weapons=? WHERE uid=?
SQL1_INPUTS = 1, 2, 3, 4

; --------------------------------------------------------------------------------
; ATM
; --------------------------------------------------------------------------------

[atm_existBankAccount]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM users WHERE bankaccount = ?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END;
SQL1_INPUTS = 1

[atm_playerBankBalance]
SQL1_1 = SELECT bank FROM users WHERE bankaccount=?;
SQL1_INPUTS = 1
OUTPUT = 1

[atm_playerCashBalance]
SQL1_1 = SELECT cash FROM users WHERE bankaccount=?;
SQL1_INPUTS = 1
OUTPUT = 1

[atm_updatePlayerBalance]
SQL1_1 = UPDATE users SET bank=? WHERE bankaccount=?;
SQL1_INPUTS = 1,2

[atm_updatePlayerCash]
SQL1_1 = UPDATE users SET cash=? WHERE bankaccount=?;
SQL1_INPUTS = 1,2

; --------------------------------------------------------------------------------
; Phone
; --------------------------------------------------------------------------------
[phone_existPhone]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM phone_data WHERE uid = ?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END;
SQL1_INPUTS = 1

[phone_getData]
SQL1_1 = SELECT number, balance, ring, skin, background FROM phone_data WHERE uid=?;
SQL1_INPUTS = 1
OUTPUT = 1-string, 2, 3, 4, 5

[phone_insertPhone]
SQL1_1 = INSERT INTO phone_data (number, uid) VALUES (?,?)
SQL1_INPUTS = 1, 2

[phone_contacts]
SQL1_1 = SELECT name, number, id FROM phone_contacts WHERE player=?;
SQL1_INPUTS = 1
OUTPUT = 1-string, 2-string, 3

[phone_insertPhoneContact]
SQL1_1 = INSERT INTO phone_contacts (player, name, number) VALUES (?,?,?);
SQL1_INPUTS = 1, 2-add_escape_quotes, 3-add_escape_quotes

[phone_updatePhoneContact]
SQL1_1 = UPDATE phone_contacts SET name=?, number=? WHERE id=?;
SQL1_INPUTS = 1-add_escape_quotes,2-add_escape_quotes,3

[phone_getMessages]
SQL1_1 = SELECT message, sender FROM phone_messages WHERE number=? ORDER BY id DESC
SQL1_INPUTS = 1
OUTPUT = 1-String, 2-String

[phone_insertMessage]
SQL1_1 = INSERT INTO phone_messages (message, sender, number) VALUES (?,?,?)
SQL1_INPUTS = 1, 2, 3

; --------------------------------------------------------------------------------
; Garage
; --------------------------------------------------------------------------------
[garage_getVehicles]
SQL1_1 = SELECT * FROM garage WHERE owner=? AND status=? AND type=?
SQL1_INPUTS = 1, 2, 3
OUTPUT = 1, 2-string, 3, 4-String, 5, 6-String, 7-String, 8-String, 9, 10, 11, 12 ,13-String

[garage_deleteVehicle]
SQL1_1 = DELETE FROM garage WHERE id=?;
SQL1_INPUTS = 1

[garage_existLicense]
SQL1_1 = SELECT CASE WHEN EXISTS(SELECT * FROM garage WHERE license = ?) THEN 'true' ELSE 'false' END
SQL1_INPUTS = 1

[garage_updateStatus]
SQL1_1 = UPDATE garage SET status=? WHERE id=?
SQL1_INPUTS = 1, 2

[garage_updateStatusStore]
SQL1_1 = UPDATE garage SET status=?, hit=?, fuel=? WHERE id=?
SQL1_INPUTS = 1, 2, 3, 4

[garage_updateStatusReset]
SQL1_1 = UPDATE garage SET status=? WHERE status=?
SQL1_INPUTS = 1, 2


; --------------------------------------------------------------------------------
; SLPD
; --------------------------------------------------------------------------------

[insertSLPDWanted]
SQL1_1 = INSERT INTO slpd_wanted (uid_suspect, uid_officer, charges, wanted_level, active) VALUES (?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5

[insertSLPDWantedVehicle]
SQL1_1 = INSERT INTO slpd_wanted_vehicle (plate, description, uid_officer, reason, wanted_level, active) VALUES (?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6

[insertSLPDTicket]
SQL1_1 = INSERT INTO slpd_tickets (uid_player, uid_officer, amount, reason, points) VALUES (?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5

[insertSLPDPrison]
SQL1_1 = INSERT INTO slpd_prison (uid_player, uid_officer, time_prison, time_left, reason) VALUES (?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5

[updateSLPDWanted_wanted]
SQL1_1 = UPDATE slpd_wanted SET wanted_level=? WHERE id=?
SQL1_INPUTS = 1, 2

[updateSLPDWanted_close]
SQL1_1 = UPDATE slpd_wanted SET wanted_level=0, active=0, uid_closed=? WHERE id=?
SQL1_INPUTS = 1, 2

[updateSLPDWantedVehicle_wanted]
SQL1_1 = UPDATE slpd_wanted_vehicle SET wanted_level=? WHERE id=?
SQL1_INPUTS = 1, 2

[updateSLPDWantedVehicle_close]
SQL1_1 = UPDATE slpd_wanted_vehicle SET wanted_level=0, active=0, uid_closed=? WHERE id=?
SQL1_INPUTS = 1, 2

[updateSLPDWantedVehicle_close_all]
SQL1_1 = UPDATE slpd_wanted_vehicle SET wanted_level=0, active=0, uid_closed=? WHERE plate=?
SQL1_INPUTS = 1, 2

[updateSLPDPrison_deactive]
SQL1_1 = UPDATE slpd_prison SET active=0 WHERE id=?
SQL1_INPUTS = 1

[updateSLPDPrison_escape]
SQL1_1 = UPDATE slpd_prison SET active=0 WHERE uid_player=?
SQL1_INPUTS = 1

[updateSLPDPrison_time]
SQL1_1 = UPDATE slpd_prison SET time_left=? WHERE id=?
SQL1_INPUTS = 1, 2

[updateSLPDPrison_active]
SQL1_1 = UPDATE slpd_prison SET active=1 WHERE id=?
SQL1_INPUTS = 1

[updateSLPDPrison_ended]
SQL1_1 = UPDATE slpd_prison SET active=0, time_left=0 WHERE uid_player=?
SQL1_INPUTS = 1

[updateSLPDPrison_finish]
SQL1_1 = UPDATE slpd_prison SET active=0, time_left=0 WHERE id=?
SQL1_INPUTS = 1

[getSLPDPrison_active]
SQL1_1 = SELECT id, uid_player, uid_officer, active, time_prison, time_left, reason FROM slpd_prison WHERE uid_player=? AND active=?
SQL1_INPUTS = 1, 2
OUTPUT = 1, 2-String, 3-String, 4, 5, 6, 7-String

[getSLPDWanted_case]
SQL1_1 = SELECT w.id, w.uid_suspect, s.name, w.uid_officer, o.name, w.charges, w.wanted_level, w.active FROM slpd_wanted w JOIN users s ON w.uid_suspect=s.uid JOIN users o ON w.uid_officer=o.uid WHERE w.id=?
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-String, 7, 8

[getSLPDWanted_active]
SQL1_1 = SELECT w.id, w.uid_suspect, s.name, w.uid_officer, o.name, w.charges, w.wanted_level, w.active FROM slpd_wanted w JOIN users s ON w.uid_suspect=s.uid JOIN users o ON w.uid_officer=o.uid WHERE w.active=? AND s.connected=1 ORDER BY w.wanted_level DESC, w.id DESC LIMIT 30
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-String, 7, 8

[getSLPDWanted_uid]
SQL1_1 = SELECT w.id, w.uid_suspect, s.name, w.uid_officer, o.name, w.charges, w.wanted_level, w.active FROM slpd_wanted w JOIN users s ON w.uid_suspect=s.uid JOIN users o ON w.uid_officer=o.uid WHERE w.uid_suspect=? AND w.active=? ORDER BY w.wanted_level DESC, w.id DESC LIMIT 30
SQL1_INPUTS = 1, 2
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-String, 7, 8

[getSLPDWantedVehicle_case]
SQL1_1 = SELECT v.id, v.plate, v.description, v.uid_officer, u.name, v.reason, v.wanted_level, v.active FROM slpd_wanted_vehicle v JOIN users u ON v.uid_officer=u.uid WHERE v.id=?
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-String, 7, 8

[getSLPDWantedVehicle_active]
SQL1_1 = SELECT v.id, v.plate, v.description, v.uid_officer, u.name, v.reason, v.wanted_level, v.active FROM slpd_wanted_vehicle v JOIN users u ON v.uid_officer=u.uid WHERE v.active=? AND v.date > timestampadd(day, -7, now()) ORDER BY v.wanted_level DESC, v.id DESC LIMIT 30
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-String, 7, 8

[getSLPDVehicle_plate]
SQL1_1 = SELECT g.license, g.class, g.color, g.finish, g.owner, u.name FROM garage g JOIN users u ON g.owner=u.uid WHERE g.license=?
SQL1_INPUTS = 1
OUTPUT = 1-String, 2-String, 3-String, 4-String, 5-String, 6-String

[getSLPDWantedVehicle_plate]
SQL1_1 = SELECT v.id, v.plate, v.description, v.uid_officer, u.name, v.reason, v.wanted_level, v.active FROM slpd_wanted_vehicle v JOIN users u ON v.uid_officer=u.uid WHERE v.plate=?
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-String, 7, 8

[getSLPDticket_uid]
SQL1_1 = SELECT t.id, t.uid_player, s.name, t.uid_officer, o.name, t.reason, t.amount, t.points FROM slpd_tickets t JOIN users s ON t.uid_player=s.uid JOIN users o ON t.uid_officer=o.uid WHERE t.uid_player=? AND t.date > timestampadd(day, -7, now()) ORDER BY t.id DESC
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-String, 7, 8

[getSLPDticket_points]
SQL1_1 = SELECT SUM(points) FROM slpd_tickets WHERE uid_player = ? AND date > timestampadd(day, -7, now())
SQL1_INPUTS = 1
OUTPUT = 1

[getSLPDplayerInfo_uid]
SQL1_1 = SELECT uid, name, cop, ems, fire, legal, statuses, cash, bank, houselevel FROM users WHERE uid=?
SQL1_INPUTS = 1
OUTPUT = 1-String, 2-String, 3, 4, 5, 6, 7, 8, 9, 10

[getSLPDplayerInfo_name]
SQL1_1 = SELECT uid FROM users WHERE name=?
SQL1_INPUTS = 1
OUTPUT = 1-String

[getSLPDPoliceStorage]
SQL1_1 = SELECT police FROM slpd_storage WHERE id=?
SQL1_INPUTS = 1
OUTPUT = 1

[updateSLPDPoliceStorage]
SQL1_1 = UPDATE slpd_storage SET police=? WHERE id=?
SQL1_INPUTS = 1, 2

; --------------------------------------------------------------------------------
; TalentTree
; --------------------------------------------------------------------------------

[talenttree_getExp]
SQL1_1 = SELECT exp_level, exp_total, exp_perkPoints, exp_perks FROM users WHERE uid=?
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3, 4

[talenttree_updateExpLevel]
SQL1_1 = UPDATE users SET exp_level=? WHERE uid=?
SQL1_INPUTS = 1, 2

[talenttree_updateExpTotal]
SQL1_1 = UPDATE users SET exp_total=? WHERE uid=?
SQL1_INPUTS = 1, 2

[talenttree_updateExpPerkPoints]
SQL1_1 = UPDATE users SET exp_perkPoints=? WHERE uid=?
SQL1_INPUTS = 1, 2

[talenttree_updateExpPerks]
SQL1_1 = UPDATE users SET exp_perks=? WHERE uid=?
SQL1_INPUTS = 1, 2

; --------------------------------------------------------------------------------
; Log system
; --------------------------------------------------------------------------------

[log_actionLog]
SQL1_1 = INSERT INTO log_action (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text, unitUID, unitName, unitCash, unitBank, unitItems, unitClothes, unitWeapons) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16

[log_vehicleLog]
SQL1_1 = INSERT INTO log_vehicle (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text, vehicleClassname, vehicleName) VALUES (?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11

[log_moneyLog]
SQL1_1 = INSERT INTO log_money (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text, unitUID, unitName, unitCash, unitBank, unitItems, unitClothes, unitWeapons, amount) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17

[log_copLog]
SQL1_1 = INSERT INTO log_cop (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text, unitUID, unitName, unitCash, unitBank, unitItems, unitClothes, unitWeapons) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16

[log_deathLog]
SQL1_1 = INSERT INTO log_death (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text, unitUID, unitName, unitCash, unitBank, unitItems, unitClothes, unitWeapons, weapon) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17

[log_economyLog]
SQL1_1 = INSERT INTO log_economy (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text, unitUID, unitName, unitCash, unitBank, unitItems, unitClothes, unitWeapons) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16

[log_adminLog]
SQL1_1 = INSERT INTO log_admin (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text, unitUID, unitName, unitCash, unitBank, unitItems, unitClothes, unitWeapons,) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16

[log_craftLog]
SQL1_1 = INSERT INTO log_craft (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text, classname, name) VALUES (?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11

[log_jobLog]
SQL1_1 = INSERT INTO log_job (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text) VALUES (?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9

[log_connectionLog]
SQL1_1 = INSERT INTO log_connection (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text) VALUES (?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9

; --------------------------------------------------------------------------------
; updateConnection & resetConnection
; --------------------------------------------------------------------------------

[updateConnection_connected]
SQL1_1 = UPDATE users SET connection=1, name=? WHERE uid=?
SQL1_INPUTS = 1, 2

[updateConnection_disconnected]
SQL1_1 = UPDATE users SET connection=0 WHERE uid=?
SQL1_INPUTS = 1

[updateConnection_reset]
SQL1_1 = UPDATE users SET connection=?
SQL1_INPUTS = 1

; --------------------------------------------------------------------------------
; Mayor,taxes, atm mayor
; --------------------------------------------------------------------------------

[getMayor]
SQL1_1 = SELECT mayor_uid FROM sl_mayor WHERE mayor_idd=?
SQL1_INPUTS = 1
OUTPUT = 1-String

[updateMayorATM]
SQL1_1 = UPDATE sl_mayor SET mayor_atm=?
SQL1_INPUTS = 1

[getMayorATM]
SQL1_1 = SELECT mayor_atm FROM sl_mayor WHERE mayor_idd=?;
SQL1_INPUTS = 1
OUTPUT = 1

[updateTax]
SQL1_1 = UPDATE sl_mayor SET mayor_taxes=?
SQL1_INPUTS = 1

[getTax]
SQL1_1 = SELECT mayor_taxes FROM sl_mayor WHERE mayor_idd=?;
SQL1_INPUTS = 1
OUTPUT = 1

; --------------------------------------------------------------------------------
; Housing
; --------------------------------------------------------------------------------

[housing_getHouseContent]
SQL1_1 = SELECT housecontent FROM users WHERE uid=?
SQL1_INPUTS = 1
OUTPUT = 1

[housing_updateHouseContent]
SQL1_1 = UPDATE users SET housecontent=? WHERE uid=?
SQL1_INPUTS = 1, 2

; --------------------------------------------------------------------------------
; Medical
; --------------------------------------------------------------------------------
[medical_getStatuses_all]
SQL1_1 = SELECT damage, dead, bleeding, head, neck, chest, back, arms, hands, pelvis, hips, legs, internal, sickness FROM medical_statuses WHERE uid_player=?
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15

[medical_updateStatuses_dead]
SQL1_1 = UPDATE medical_statuses SET dead=? WHERE uid_player=?
SQL1_INPUTS = 1, 2

[medical_updateStatuses_all]
SQL1_1 = UPDATE medical_statuses SET damage=?, dead=?, bleeding=?, head=?, neck=?, chest=?, back=?, arms=?, hands=?, pelvis=?, hips=?, legs=?, internal=?, sickness=? WHERE uid_player=?
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15

[medical_insertStatuses]
SQL1_1 = INSERT INTO medical_statuses (uid_player) VALUES (?);
SQL1_INPUTS = 1

[medical_checkIfExists]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM medical_statuses WHERE uid_player=?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END;
SQL1_INPUTS = 1

; --------------------------------------------------------------------------------
; Showroom
; --------------------------------------------------------------------------------
[showroom_fetchPrices]
SQL1_1 = SELECT classname, price, count, type FROM showroom_prices
OUTPUT = 1-String, 2, 3, 4-string

[showroom_insertVehicle]
SQL1_1 = INSERT INTO garage (classname, owner, license, hit, color, material, rims, windows, lights, fuel, status, type) VALUES (?,?,?,?,?,?,?,?,?,?,?,?);
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12

[showroom_updateCount]
SQL1_1 = UPDATE showroom_prices SET count=? WHERE classname=?
SQL1_INPUTS = 1, 2
; --------------------------------------------------------------------------------
; Shopping system
; --------------------------------------------------------------------------------
[shoppingsystem_prices]
SQL1_1 = SELECT classname, price, count, type, itemType FROM shoppingsystem_prices
OUTPUT = 1-String, 2, 3, 4-string, 5

[shoppingsystem_updateCount]
SQL1_1 = UPDATE shoppingsystem_prices SET count=? WHERE classname=? AND type=?
SQL1_INPUTS = 1, 2, 3
